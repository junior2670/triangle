WEBVTT

00:00.000 --> 00:06.920
Salut Ã  tous, c'est Florian du site ITConnect,
bienvenue dans cette nouvelle vidÃ©o dÃ©diÃ©e Ã

00:06.920 --> 00:12.239
l'apprentissage du scripting Bash sous Linux.
Dans cette vidÃ©o, nous allons nous intÃ©resser

00:12.239 --> 00:17.360
tout particuliÃ¨rement aux boucles while. Ces
boucles while vont nous permettre d'exÃ©cuter

00:17.360 --> 00:23.040
une action tant qu'une condition est vraie.
On va pouvoir rÃ©pÃ©ter une action pendant

00:23.879 --> 00:28.559
un temps dÃ©fini et on va voir tout Ã§a dans cette
vidÃ©o. DÃ©jÃ , on va Ã©tudier la syntaxe des boucles

00:28.639 --> 00:33.759
while et puis aprÃ¨s, on va voir comment l'utiliser
au travers de diffÃ©rents exemples. N'hÃ©sitez pas

00:33.759 --> 00:38.040
Ã  regarder les prÃ©cÃ©dentes vidÃ©os de cette sÃ©rie
si vous souhaitez apprendre le scripting Bash et

00:38.040 --> 00:41.840
que vous partez vraiment de zÃ©ro. Avant de passer
Ã  la suite, pensez Ã  vous abonner Ã  la chaÃ®ne

00:41.840 --> 00:51.880
YouTube ITConnect. Voici Ã  l'Ã©cran la syntaxe de
base d'une boucle while. On va retrouver le mot

00:52.040 --> 00:58.799
clÃ© while et entrecrocher, on va avoir la condition
que l'on veut Ã©valuer. Tout le temps que cette

00:58.799 --> 01:04.639
condition est vraie, on va exÃ©cuter le code
qui est prÃ©sent entre les mots clÃ©s do et done

01:04.639 --> 01:10.440
tout Ã  la fin. Au niveau de la syntaxe, c'est un
mÃ©lange entre les boucles for et les structures

01:10.440 --> 01:15.599
conditionnelles if. Avec les structures
conditionnelles, on met if et entrecroche la

01:15.599 --> 01:21.400
condition. Ensuite, on a le then et le else qui
peuvent venir aprÃ¨s, puis on a le fi aussi Ã  la

01:21.400 --> 01:27.680
fin. Avec les boucles for, on a la condition
et ensuite on a do et done. On a un mÃ©lange

01:27.680 --> 01:33.400
puisqu'on va avoir while et la condition entrecrochÃ©es
comme avec le if et ensuite le do et le done comme

01:33.400 --> 01:39.720
avec le for, pour faire la comparaison et Ãªtre au
clair sur les diffÃ©rentes syntaxes. Si on veut

01:39.720 --> 01:46.519
traduire Ã§a littÃ©ralement, on pourrait dire
que tant que la condition est vraie, on fait ceci

01:46.519 --> 01:52.279
et puis Ã§a rÃ©pÃ¨te. On va itÃ©rer sur la boucle
jusqu'Ã  ce que cette condition soit fausse

01:52.279 --> 01:56.440
Maintenant, on va voir comment utiliser la boucle
while au travers de diffÃ©rents exemples. Voici un

01:56.440 --> 02:01.279
premier exemple qui est affichÃ© Ã  l'Ã©cran.
Ici, la variable nombre est Ã©gale Ã  1. En fait

02:01.279 --> 02:10.039
tant que la variable nombre, sa valeur est plus
ou moins Ã©gale Ã  5, on va Ã©crire un message

02:10.039 --> 02:15.360
nombre de points, et on va afficher ce fameux
nombre. On va appeler la variable et on va

02:15.360 --> 02:23.559
incrÃ©menter de 1 la variable nombre via la ligne
qui est ici. En principe, on va avoir dans la

02:23.559 --> 02:30.600
console un nombre 1, 2, 3, 4, 5. Une fois que le
nombre sera Ã©gal Ã  6, on va sortir de la boucle

02:30.759 --> 02:37.320
On pourrait mÃªme mettre ici une petite
ligne boucle terminÃ©e. On va enregistrer Ã§a

02:37.320 --> 02:44.000
on va le lancer, on va exÃ©cuter, et on voit
bien qu'on a les nombres 1, 2, 3, 4, 5. Ensuite

02:44.000 --> 02:49.199
on a la condition qui n'est plus vraie puisque
dollarNum est Ã©gal Ã  6, donc il n'est pas plus

02:49.199 --> 02:54.080
petit ou Ã©gal Ã  5. Ã€ partir de lÃ , on sort de
la boucle et j'ai bien mon message boucle terminÃ©e

02:54.080 --> 02:58.880
qui s'est affichÃ©. VoilÃ  pour ce premier exemple
sur les boucles while. On va basculer sur un

02:58.880 --> 03:05.639
second exemple oÃ¹ je vous montre qu'on peut
avoir dans le while deux conditions. Comme on a

03:05.639 --> 03:10.199
possibilitÃ© d'avoir deux conditions avec un if,
par exemple dans une structure conditionnelle

03:10.880 --> 03:18.279
on va pouvoir Ã©valuer deux conditions. Chaque
condition entre crochets, le et ici permet de

03:18.279 --> 03:24.399
dire qu'il faut que cette condition soit vraie et
celle-ci. Les deux conditions doivent Ãªtre vraies

03:24.399 --> 03:30.520
pour qu'on continue Ã  itÃ©rer sur cette boucle. On
pourrait remplacer le et ici par le ou, comme on

03:30.520 --> 03:37.479
l'avait dÃ©jÃ  vu, avec deux barres verticales, le
fameux caractÃ¨re du pipeline. Ici, on va rester

03:37.479 --> 03:43.080
sur le et, donc lÃ  j'ai deux variables, un nombre
1, un nombre 2. Pour que la boucle continue

03:43.080 --> 03:47.800
on va dire qu'il faut que la premiÃ¨re valeur soit
plus petite ou Ã©gal Ã  10 et la deuxiÃ¨me plus

03:47.800 --> 03:55.039
petite ou Ã©gal Ã  5. En principe, on ne devrait
jamais aller au-delÃ  de 5 au niveau du texte qui

03:55.039 --> 04:00.240
sera renvoyÃ© dans la console. D'ailleurs, on va
pouvoir le vÃ©rifier trÃ¨s facilement puisqu'on

04:00.240 --> 04:07.240
va exÃ©cuter le script. J'ai bien un nombre 1, 2, 3,
4, 5 Ã  chaque fois et ensuite Ã§a s'arrÃªte Ã  5

04:07.240 --> 04:14.000
puisque quand le nombre 2 est Ã©gal Ã  6, cette
condition n'est plus vraie. On sort de la boucle

04:14.000 --> 04:18.799
on pourrait trÃ¨s facilement voir la diffÃ©rence
si on remplace le et par le ou. LÃ , il faut que

04:18.799 --> 04:24.440
l'une ou l'autre des conditions soient vraies pour
que l'on exÃ©cute le code de la boucle. Dans ce

04:24.440 --> 04:30.679
cas-lÃ , on voit bien tout de suite la diffÃ©rence
au niveau du comportement. Une fois que les deux

04:30.679 --> 04:36.720
conditions sont fausses, c'est-Ã -dire qu'il
faut que le nombre 1 soit supÃ©rieur Ã  10

04:36.720 --> 04:40.640
c'est Ã  partir de lÃ  qu'on sort de la boucle.
Pour finir, nous allons voir un troisiÃ¨me exemple

04:40.839 --> 04:45.399
qui correspond vraiment Ã  un cas d'utilisation
pratique de la boucle WAI. L'idÃ©e va Ãªtre la

04:45.399 --> 04:51.000
suivante. On imagine que ma machine Linux est
protÃ©gÃ©e par l'outil Krotsek, qui permet de

04:51.000 --> 04:57.239
dÃ©tecter et bloquer les attaques. J'avais fait des
vidÃ©os sur cette solution. Mon idÃ©e, c'est de me

04:57.239 --> 05:04.160
dire que j'ai un fichier qui s'appelle ip.txt, qui
est mentionnÃ© ici, qui contient des adresses IP

05:04.160 --> 05:09.920
malveillantes. D'ailleurs, on pourrait aller voir
ce fichier-lÃ . J'ai mis des IP alÃ©atoirement

05:09.920 --> 05:14.480
j'ai 4 adresses IP, comme on le voit, une
adresse IP par ligne. Je voudrais parcourir

05:14.480 --> 05:21.000
l'intÃ©gralitÃ© de ce fichier, de faÃ§on Ã  bannir
chaque adresse IP. Si je n'ai pas un script pour

05:21.000 --> 05:26.480
le faire, Ã§a peut Ãªtre assez contraignant,
puisqu'il va falloir faire une commande par rÃ¨gle

05:26.480 --> 05:30.760
Du coup, Ã§a peut Ãªtre assez long. D'ailleurs,
la commande qui permet de bannir une IP, c'est

05:30.760 --> 05:37.200
celle-ci, cscli-decision-add-ip, et lÃ  on met
l'adresse IP. Mon idÃ©e, Ã§a va Ãªtre de prendre

05:37.359 --> 05:42.320
une boucle wild, on aurait pu faire autrement,
on va prendre la boucle wild, on va parcourir le

05:42.320 --> 05:47.519
fichier ligne par ligne, de faÃ§on Ã  exÃ©cuter
une action. On voit qu'on peut mÃªme intÃ©grer

05:47.519 --> 05:52.200
bien sÃ»r, dans une boucle wild, autre chose,
comme ici une structure conditionnelle. LÃ 

05:52.200 --> 05:57.000
on a une premiÃ¨re ligne un peu bizarre, qui est
Ã©crite de faÃ§on diffÃ©rente vis-Ã -vis de la

05:57.000 --> 06:03.720
condition entre crochets, puisque lÃ  on va lui
dire de lire le contenu du fichier, et le contenu

06:03.799 --> 06:08.760
du fichier, on va l'injecter Ã  la fin avec le
redirecteur, comme ceci, et on va mettre du coup

06:08.760 --> 06:16.440
ip.txt. On va indiquer le IFS en majuscule,
c'est pour indiquer le caractÃ¨re sÃ©parateur Ã

06:16.440 --> 06:22.519
l'intÃ©rieur du fichier. LÃ , c'est blanc, puisque
le caractÃ¨re sÃ©parateur n'y en a pas, c'est une

06:22.519 --> 06:29.679
nouvelle ligne Ã  chaque fois. Par exemple, nous
aurions pu prÃ©ciser le diÃ¨se, si c'est le diÃ¨se

06:29.679 --> 06:34.440
qui sÃ©pare chacune des valeurs dans le fichier.
Tout dÃ©pend comment est formatÃ© ce fameux fichier

06:34.440 --> 06:41.880
Ensuite, le read-rip, Ã§a permet de dire qu'on va
lire chaque valeur du fichier, et on va associer

06:41.880 --> 06:49.000
chaque valeur Ã  la variable ip Ã  chaque itÃ©ration
de la boucle. Le tirer-r, c'est pour ne pas tenir

06:49.000 --> 06:56.239
compte des caractÃ¨res d'Ã©chappement, en l'occurrence
le slash inversÃ©. Une fois qu'on va avoir fait Ã§a

06:56.239 --> 07:01.279
on va parcourir l'intÃ©gralitÃ© de la boucle.
Quand on sera arrivÃ© Ã  la fin du fichier

07:01.279 --> 07:08.000
la condition sera fausse, et donc on va sortir de la
boucle. Ensuite, le if est utilisÃ© pour vÃ©rifier

07:08.000 --> 07:12.600
que la ligne n'est pas vide. Par exemple, si j'ai
sautÃ© une ligne entre deux ip, et que je me retrouve

07:12.600 --> 07:17.519
avec une valeur vide, Ã§a va me renverrer une
erreur au moment de faire exÃ©cuter cette commande

07:17.519 --> 07:22.160
LÃ , je regarde si la ligne n'est pas
vide, donc si la valeur d'ip n'est pas vide

07:23.119 --> 07:29.640
je crÃ©e la rÃ¨gle. La rÃ¨gle, on l'appelle
simplement notre variable $ip. Je pourrais

07:29.640 --> 07:36.440
m'amuser Ã  exÃ©cuter ce script pour vous montrer ce
que Ã§a donne. J'ai Ã  chaque fois une ligne avec

07:36.440 --> 07:41.040
le Ã©cho de la commande complÃ¨te qui a Ã©tÃ© exÃ©cutÃ©e,
puisque Ã§a correspond au Ã©cho qui est ici. J'ai

07:41.040 --> 07:46.559
voulu afficher quand mÃªme la commande associÃ©e
Ã  chaque fois, et lÃ  c'est le rÃ©sultat de la

07:46.559 --> 07:52.040
commande CSCLI en elle-mÃªme. Donc lÃ , Ã§a
a bien ajoutÃ© la dÃ©cision au niveau de mon

07:52.040 --> 07:57.480
crottesÃ¨que. D'ailleurs, je pourrais faire un
CSCLI dÃ©cision liste, et je retrouve bien ici mes

07:57.480 --> 08:03.079
adresses ip bannies au niveau de mon crottesÃ¨que
local. J'ai agrandi la fenÃªtre, comme Ã§a on voit

08:03.079 --> 08:11.160
mieux, mais Ã§a a permis d'automatiser la crÃ©ation
de ces fameuses rÃ¨gles. Nous venons de voir comment

08:11.160 --> 08:16.200
utiliser les boucles WILE en bÃ¢che. J'espÃ¨re que
cette vidÃ©o vous a plu, n'hÃ©sitez pas Ã  commenter

08:16.399 --> 08:21.519
Ã  liker, Ã  partager, Ã  me poser vos questions
en commentaire si vous en avez. Il y aura d'autres

08:21.519 --> 08:25.679
vidÃ©os sur le scripting bÃ¢che, donc n'hÃ©sitez pas
Ã  vous abonner pour ne rien manquer ! A trÃ¨s vite 
%t“eX&      gJngJnGrF³g;lI   ‘    O^partitionKey=%28https%2Cit-connect.fr%29,a,~FETCH,:https://video-meta.humix.com/caption/wTYcH5AWYKo5/c6a45bc0434a5530881f35eaa63730a3_fr-FR.vtt necko:classified 1 strongly-framed 1 security-info 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 request-method GET request-Origin https://www.it-connect.fr request-Accept-Encoding gzip, deflate, br, zstd response-head HTTP/2 200 
date: Sat, 19 Oct 2024 05:58:06 GMT
content-type: text/vtt; charset=utf-8
content-length: 10513
access-control-allow-origin: *
content-disposition: inline
etag: "c6a45bc0434a5530881f35eaa63730a3"
last-modified: Fri, 06 Sep 2024 16:38:14 GMT
vary: Origin, Accept-Encoding
cache-control: max-age=2678400
cf-cache-status: HIT
age: 48293
accept-ranges: bytes
report-to: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=VYxPqU6LMnor8I5%2Fz1We%2BmLYrW%2B%2FG1bVwNMXu70UeJjbBBPdjc%2F1w00eV3qnuhOMpoVq4hwYZHyLFPTpEvcZTPCB2qw3rFn304naYJs8C5A%2B0lItFhCvFY75Lg7S4KEh2jkXmEQLgA%3D%3D"}],"group":"cf-nel","max_age":604800}
nel: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
server: cloudflare
cf-ray: 8d4e88cfcd3eb79f-ABJ
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=14020&sent=82&recv=69&lost=0&retrans=0&sent_bytes=92568&recv_bytes=1939&delivery_rate=7250564&cwnd=257&unsent_bytes=0&cid=4d7d6c9dffcba43d&ts=121&x=0"
X-Firefox-Spdy: h2
 original-response-headers date: Sat, 19 Oct 2024 05:58:06 GMT
content-type: text/vtt; charset=utf-8
content-length: 10513
access-control-allow-origin: *
content-disposition: inline
etag: "c6a45bc0434a5530881f35eaa63730a3"
last-modified: Fri, 06 Sep 2024 16:38:14 GMT
vary: Origin, Accept-Encoding
cache-control: max-age=2678400
cf-cache-status: HIT
age: 48293
accept-ranges: bytes
report-to: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=VYxPqU6LMnor8I5%2Fz1We%2BmLYrW%2B%2FG1bVwNMXu70UeJjbBBPdjc%2F1w00eV3qnuhOMpoVq4hwYZHyLFPTpEvcZTPCB2qw3rFn304naYJs8C5A%2B0lItFhCvFY75Lg7S4KEh2jkXmEQLgA%3D%3D"}],"group":"cf-nel","max_age":604800}
nel: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
server: cloudflare
cf-ray: 8d4e88cfcd3eb79f-ABJ
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=14020&sent=82&recv=69&lost=0&retrans=0&sent_bytes=92568&recv_bytes=1939&delivery_rate=7250564&cwnd=257&unsent_bytes=0&cid=4d7d6c9dffcba43d&ts=121&x=0"
X-Firefox-Spdy: h2
 ctid 1 net-response-time-onstart 153 net-response-time-onstop 154   )