WEBVTT

00:00.000 --> 00:07.039
Salut √† tous, c'est Florian du site ITKone,
bienvenue dans cette nouvelle vid√©o d√©di√©e au

00:07.039 --> 00:11.800
scripting bash o√π nous allons apprendre √†
utiliser les boucles FOR qui vont √©galement

00:11.800 --> 00:15.680
permettre de faire ce que l'on pourrait appeler
des boucles FOREACH. Les boucles FOR vont √™tre

00:15.680 --> 00:20.479
tr√®s int√©ressantes pour automatiser l'ex√©cution
de t√¢ches r√©p√©titives, notamment sur un ensemble

00:20.479 --> 00:24.479
d'√©l√©ments. Cela peut √™tre sur toutes les
lignes d'un fichier ou un certain nombre de fois

00:24.479 --> 00:29.120
etc. en fonction des besoins. Cette vid√©o est
la troisi√®me sur le sujet du scripting bash

00:29.440 --> 00:33.279
j'esp√®re qu'elle vous plaira. Avant de regarder
la suite, pensez √† vous abonner √† la cha√Æne

00:33.279 --> 00:42.599
YouTube ITKonect. Nous allons voir qu'en scripting
bash, il y a deux syntaxes diff√©rentes pour

00:42.599 --> 00:46.560
utiliser les boucles FOR. D'ailleurs, cette
premi√®re syntaxe pr√©sente √† l'√©cran correspond

00:46.560 --> 00:50.400
en quelque sorte √† du FOREACH puisqu'on va
pouvoir parcourir par exemple l'ensemble des

00:50.400 --> 00:56.159
lignes d'un fichier sans faire d'efforts
particuliers en termes de syntaxe. Ce que

00:56.159 --> 01:00.240
l'on va tout simplement √©crire, c'est d√©j√† le
mot cl√© FOR. C'est toujours ce mot cl√©, peu

01:00.240 --> 01:05.919
importe la syntaxe qu'on va utiliser. Derri√®re, on
va d√©finir une variable qui va √™tre propre √† la

01:05.919 --> 01:09.760
boucle et qui va nous permettre de parcourir les
√©l√©ments les uns apr√®s les autres. Ensuite

01:09.760 --> 01:14.360
IN et derri√®re on met notre liste d'√©l√©ments.
Cela peut √™tre simplement une liste de quelques

01:14.360 --> 01:19.599
valeurs ou un fichier, ce qui va permettre de
dire √† la boucle FOR qu'elle doit parcourir

01:19.599 --> 01:23.680
l'int√©gralit√© des lignes du fichier. Dans
ce cas, on va partir de la premi√®re ligne

01:23.680 --> 01:28.400
on va aller jusqu'√† la derni√®re et on va pouvoir
appliquer une action de fa√ßon r√©p√©titive sur

01:28.400 --> 01:33.680
l'ensemble des √©l√©ments. Une fois qu'on a √©crit
cette premi√®re ligne, on va venir mettre le DOO

01:33.680 --> 01:39.440
et √† la fin le DONE. Entre le DOO et le DONE,
on va venir √©crire l'ensemble du code que l'on

01:39.440 --> 01:46.360
veut ex√©cuter pour chaque √©l√©ment √† traiter.
C'est la premi√®re syntaxe d'une boucle FOR. Si

01:46.360 --> 01:50.199
l'on essaie de la mettre en pratique assez
rapidement, voici un script tr√®s basique

01:50.400 --> 01:55.040
On a FOR i, et dans ce cas-l√† le i sera la variable
que je vais pouvoir utiliser √† l'int√©rieur de la

01:55.040 --> 02:02.519
boucle IN. Je d√©finis un tableau de valeur de 1
jusqu'√† 5. On va simplement √©crire √©tape num√©ro

02:02.519 --> 02:08.399
$i, c'est-√†-dire √©tape num√©ro 1, num√©ro 2,
etc. jusqu'√† 5, en principe compte tenu du

02:08.399 --> 02:13.880
fonctionnement d'une boucle FOR. On va pouvoir
ex√©cuter ce premier script comme ceci. J'ai bien

02:13.880 --> 02:19.520
le retour √©tape num√©ro 1, num√©ro 2, etc. jusqu'√†
la 5. Une fois qu'on est arriv√© √† la fin de la

02:19.520 --> 02:24.320
liste d'√©l√©ments, la boucle s'arr√™te. Comme je
n'ai rien d'autre dans mon script, on voit que j'ai

02:24.320 --> 02:28.759
bien le retour console qui appara√Æt √† l'√©cran.
Nous allons voir maintenant la seconde syntaxe

02:28.759 --> 02:33.839
possible. Dans ce cas-l√†, on va partir toujours
avec le mot cl√© FOR, et on va avoir entre double

02:33.839 --> 02:40.240
parenth√®se trois valeurs √† indiquer. D√©j√† c'est
l'√©tat initial, typiquement le $i qui est √©gal √† 1

02:40.240 --> 02:45.440
ou √† 0, c'est souvent ce qu'on fait dans les
boucles FOR dans les diff√©rents langages. Point

02:45.440 --> 02:49.479
virgule la condition de r√©p√©tition, c'est √†
dire une condition √† √©valuer qui va permettre de

02:49.479 --> 02:55.160
d√©terminer si oui ou non on doit continuer √†
ex√©cuter le bloc de code pr√©sent dans la boucle

02:55.160 --> 03:01.720
ou au contraire si on doit sortir de la boucle.
Point virgule l'√©l√©ment √† incr√©menter √† chaque

03:01.720 --> 03:06.399
it√©ration. On va avoir une variable qui va √™tre
notre √©tat initial, que l'on va incr√©menter √

03:06.399 --> 03:10.679
chaque it√©ration, c'est √† dire √† chaque tour de
boucle, de mani√®re √† un moment donn√© √† pouvoir

03:10.759 --> 03:16.800
sortir, puisqu'on va √©valuer cette variable au
niveau de la condition de r√©p√©tition. Si on

03:16.800 --> 03:21.199
reprend exactement le m√™me principe que ce que
je viens de vous montrer tout √† l'heure avec le

03:21.199 --> 03:27.199
FOREACH, o√π on a fait √©tape num√©ro 1 jusqu'√† 5,
si on veut obtenir le m√™me r√©sultat avec cette

03:27.199 --> 03:32.039
seconde syntaxe, voici le code que l'on doit
√©crire. On voit que c'est un peu plus lourd en

03:32.039 --> 03:39.440
termes de syntaxe, mais on obtiendra strictement
le m√™me r√©sultat. On d√©finit la variable $i qui

03:39.440 --> 03:47.199
est √©gale √† 1 d√®s le d√©part. On va √† chaque
fois faire plus 1 sur cette variable, d'o√π le i++

03:47.199 --> 03:52.000
qui va permettre d'incr√©menter de 1 la variable
√† chaque it√©ration. Ici c'est la condition de

03:52.000 --> 04:00.080
r√©p√©tition, donc il faut que i soit inf√©rieur ou
√©gal √† 5 pour qu'on continue √† it√©rer la boucle

04:00.720 --> 04:07.080
Si on ex√©cute ce script, on va voir qu'on obtient
exactement le m√™me r√©sultat que tout √† l'heure

04:07.399 --> 04:11.479
D'ailleurs vous avez la sortie des deux m√©thodes
et on a exactement la m√™me chose, c'est simplement

04:11.479 --> 04:16.359
une histoire d'√©criture. Apr√®s c'est une histoire
d'√©criture, mais tout d√©pend de ce qu'on veut

04:16.359 --> 04:20.160
faire. Il y a des cas o√π on va directement
s'orienter vers le FOREACH, notamment si on

04:20.160 --> 04:25.440
veut parcourir l'int√©gralit√© d'un fichier. Ce
sera beaucoup plus simple que d'utiliser une boucle

04:25.440 --> 04:32.880
FOR tel que je viens de vous la montrer. Voici
un exemple autour de cette notion de fichier

04:32.880 --> 04:39.359
puisque l√† on va prendre la liste de tous
les fichiers .txt pr√©sents dans le dossier

04:39.359 --> 04:45.399
Home Flow Documents, et on va ex√©cuter une action
sur chacun de ces fichiers. On va pouvoir traiter

04:45.399 --> 04:51.000
de fa√ßon r√©p√©titive un ensemble de fichiers. J'ai
ma variable fichier qui sera interne √† la boucle

04:51.000 --> 04:57.440
et on va compter le nombre de lignes dans chacun
de ces fichiers. C'est une action tr√®s basique

04:57.440 --> 05:04.160
mais √ßa vous montre un peu le potentiel des
boucles FOREACH en scripting batch. J'ai mon

05:04.160 --> 05:09.399
dollar fichier pour rappeler le nom de mon fichier
et pour l'afficher √† l'√©cran. Entre le dollar

05:09.399 --> 05:14.959
la parenth√®se qui est l√† et la parenth√®se qui
est l√†, √ßa me permet d'avoir √† l'int√©rieur de ce

05:14.959 --> 05:21.799
bloc une expression √† ex√©cuter. Je vais ex√©cuter
la commande CAT pour afficher le contenu du fichier

05:22.519 --> 05:27.959
Le pipeline je l'envoie √† wc-l pour compter
le nombre de lignes et l'afficher √† l'√©cran

05:27.959 --> 05:33.000
Et nous verrons que toute cette partie du script
sera remplac√©e simplement par un nombre de lignes

05:33.000 --> 05:40.359
Donc on va ex√©cuter ce petit script l√†, et j'ai
bien l'ensemble de mes fichiers .txt pr√©sents

05:40.359 --> 05:44.440
dans ce dossier. Apparemment il y en a cinq, et √†
chaque fois j'ai le nombre de lignes qui appara√Æt

05:44.440 --> 05:50.519
Du coup on pourrait s'amuser m√™me √† v√©rifier,
par exemple si on prend le fichier num√©ro 3

05:50.959 --> 05:56.079
on l'affiche. Alors effectivement il a bien une,
deux, trois lignes, ce qui a bien √©t√© retourn√© ici

05:56.079 --> 05:59.720
Et donc on a pu faire cette action r√©p√©titive.
On aurait pu faire totalement autre chose

05:59.720 --> 06:03.600
mais on a vraiment fait une action r√©p√©titive
sur un ensemble de fichiers que l'on a souhait√

06:03.600 --> 06:07.359
traiter. Je vais vous pr√©senter un autre exemple
bas√© sur la manipulation de fichiers, o√π cette

06:07.359 --> 06:12.040
fois-ci nous allons prendre la liste de tous les
fichiers .txt pr√©sents dans le r√©pertoire courant

06:12.040 --> 06:21.000
Donc on voit bien ici que je n'ai pas pr√©cis√© de chemin complet, ce qui veut dire qu'on va prendre
le r√©pertoire courant dans lequel on se situe au niveau du shell bash. Et donc on va faire une

06:21.000 --> 06:25.839
action de renommage, c'est √† dire qu'on va prendre
chaque fichier et on va le renommer en lui ajoutant

06:25.839 --> 06:32.160
le pr√©fixe ITCONNECT. On pourrait renommer
en masse des fichiers avec un tel script

06:32.160 --> 06:40.920
Donc l√† c'est un exemple tr√®s simple, une nouvelle fois o√π j'ai simplement rajout√© ITCONNECT,
mais √ßa √©vite de le faire √† la main. Dans ce fichier l√†, qu'est-ce que j'ai ? J'ai

06:41.040 --> 06:45.600
un document 1, un document 2, jusqu'√† 5.
On va maintenant ex√©cuter ce fameux script

06:45.600 --> 06:51.079
donc qui est celui-ci. Et en principe il n'y
a aucun retour console, ce qui est normal

06:51.079 --> 06:57.480
je n'ai pas inclus de √©cho dans ma boucle. Mais
maintenant si je refais un ls, j'ai bien pour le

06:57.480 --> 07:01.839
coup l'ensemble de mes documents qui ont √©t√©
renomm√©s avec ITCONNECT, donc c'est bien le

07:01.839 --> 07:06.279
pr√©fixe que j'ai souhait√© ajouter. Je n'ai pas eu
√† le faire √† la main, donc l√† j'aurais eu 200

07:06.279 --> 07:14.079
fichiers √† traiter, √ßa l'aurait fait tr√®s rapidement alors qu'√† la main √ßa aurait √©t√©
relativement p√©nible. Donc on voit bien ici l'int√©r√™t d'une boucle fort pour automatiser

07:14.079 --> 07:18.920
l'ex√©cution de t√¢ches r√©p√©titives. Nous allons
√©tudier un autre exemple, toujours dans cette

07:18.920 --> 07:23.839
id√©e de vous montrer un petit peu le potentiel
de tout √ßa. Ici j'ai d√©fini un tableau dans la

07:23.839 --> 07:29.239
variable SERVICE qui contient deux noms de
services SSH et APACHE2. On voit en m√™me temps

07:29.239 --> 07:34.640
que dans un tableau, entre parenth√®ses, on met les
valeurs, on les s√©pare par un espace. L'objectif

07:34.640 --> 07:40.480
va √™tre de parcourir ce tableau pour red√©marrer de
fa√ßon automatique les services qui sont pr√©sents

07:40.480 --> 07:44.079
dans ce tableau. On peut imaginer que c'est
tr√®s int√©ressant sur un serveur quand on veut

07:44.079 --> 07:47.959
l'administrer. Si on a besoin de red√©marrer un
ensemble de services, plut√¥t que d'encha√Æner

07:47.959 --> 07:52.359
√† la main toutes les commandes en changeant le
nom du service √† chaque fois, on se fait un petit

07:52.359 --> 07:56.279
script comme √ßa. On lance le script et derri√®re
c'est lui qui va s'occuper de red√©marrer les

07:56.279 --> 08:02.640
services dans l'ordre tel qu'ils sont pr√©cis√©s
dans la variable SERVICE. Je mets ici SERVICE

08:02.720 --> 08:08.440
sans S qui sera ma variable √† l'int√©rieur de
la boucle. Je vais parcourir l'ensemble de mon

08:08.440 --> 08:13.399
tableau. C'est pour √ßa qu'ici j'ai utilis√© cette
syntaxe avec le arrow base pour s√©lectionner

08:13.399 --> 08:20.119
l'ensemble des √©l√©ments du tableau. Cela va
retourner tous les √©l√©ments. Le √©cho pour avoir

08:20.119 --> 08:25.799
une petite phrase de suivi dans la console et on
va un syst√®me CTL restart derri√®re le nom du

08:25.799 --> 08:32.159
service. Je pourrais soit mettre le sudo directement
ici ou je peux mettre le sudo quand je vais

08:33.159 --> 08:38.719
le dire directement appel√© le script. Comme √ßa,
cela va me permettre d'avoir l'√©l√©vation de

08:38.719 --> 08:46.640
privil√®ges n√©cessaire pour red√©marrer les services. Cela me demande bien le mot de passe,
donc cela nous permet de voir aussi en m√™me temps le fait que l'on puisse utiliser sudo pour

08:46.640 --> 08:51.400
ex√©cuter un script qui n√©cessite une √©l√©vation
de privil√®ges. L√† j'ai bien eu un red√©marrage de

08:51.400 --> 08:55.799
mes services. J'ai le suivi directement dans la
console qui est plut√¥t int√©ressant. Pour finir

08:55.799 --> 09:00.400
voici un dernier exemple. Nous allons mixer
l'utilisation de la boucle fort avec les

09:00.400 --> 09:05.479
structures conditionnelles if-else. L'id√©e ici
c'est toujours d'avoir notre liste de services

09:05.479 --> 09:10.320
avec simplement deux services. On va parcourir
cette liste de services et on va v√©rifier l'√©tat

09:10.320 --> 09:19.479
de chacun des services pr√©sents dans notre tableau.
L'id√©e c'est de faire un if. La condition du if

09:19.479 --> 09:27.320
c'est syst√®mectl isActive de fa√ßon silencieuse.
Le if tel qu'il est √©crit ici va permettre de

09:27.320 --> 09:33.080
v√©rifier que le service est actif et on ne va rien
retourner dans la console. C'est pour √ßa que j'ai

09:33.080 --> 09:39.039
rajout√© le quiet. Si le service est actif, on
retourne le service est actif en mettant le nom

09:39.039 --> 09:46.239
du service. Sinon, c'est qu'il est inactif. On
va pouvoir ex√©cuter ce script. J'ai donc bien

09:46.239 --> 09:51.799
v√©rification de l'√©tat du service SSH. Le service
SSH est actif et la m√™me chose pour Apache 2

09:51.799 --> 09:57.239
A chaque fois j'ai le retour console, puisque j'ai
bien une phrase qui √©tait ici pour l'ensemble

09:57.719 --> 10:02.080
de mes services √† traiter. Ensuite, en fonction de
l'√©tat du service en lui-m√™me, on va retourner

10:02.080 --> 10:07.380
une valeur qui sera diff√©rente. Dans le cas
pr√©sent, au niveau du if, on voit que je n'ai

10:07.380 --> 10:11.799
pas mis de crochet au niveau de la condition.
C'est normal, sinon √ßa renverrait une erreur

10:11.799 --> 10:17.520
vis-√†-vis du test qui a √©t√© fait dans le cas
pr√©sent. Cela permet aussi de voir cette possibilit√©

10:17.520 --> 10:24.440
J'esp√®re que cette vid√©o vous a plu ! Apr√®s
l'avoir regard√©e, vous √™tes pr√™ts √† mettre

10:24.440 --> 10:29.559
en pratique les boucles forts en scripting bash.
N'h√©sitez pas √† aller sur le site itconnect.fr

10:29.559 --> 10:33.400
puisque vous pouvez retrouver l'ensemble des
articles sur le scripting bash, et aussi l'ensemble

10:33.400 --> 10:37.000
des exemples, ce qui vous permet de faire des
copier-coller √©ventuellement des scripts que

10:37.000 --> 10:42.440
je vous pr√©sente, pour les tester de votre c√¥t√©,
ou pour les am√©liorer, les adapter √† vos besoins

10:42.440 --> 10:46.719
N'h√©sitez pas √† commenter cette vid√©o, √† me dire
ce que vous en pensez, √† la partager √©galement

10:46.719 --> 10:48.159
et puis je vous dis
√† tr√®s vite ! Ciao 
¯¸œ	      gJngJnGrF≥g;Ω—   ë    O^partitionKey=%28https%2Cit-connect.fr%29,a,~FETCH,:https://video-meta.humix.com/caption/YQQ-49oO38pr/570baec0b5a123af6ed0855aa7eb46b1_fr-FR.vtt necko:classified 1 strongly-framed 1 security-info FnhllAKWRHGAlo+ESXykKAAAAAAAAAAAwAAAAAAAAEaphjojH6pBabDSgSnsfLHeAAAAAgAAAAAAAAAAAAAAAAAAAAEAOQFmCjImkVxP+7sgiYWmMt8FvcOXmlQiTNWFiWlrbpbqgwAAAAAAAAOsMIIDqDCCA06gAwIBAgIQDXWstFGaGRUOpDtgQuT2XzAKBggqhkjOPQQDAjA7MQswCQYDVQQGEwJVUzEeMBwGA1UEChMVR29vZ2xlIFRydXN0IFNlcnZpY2VzMQwwCgYDVQQDEwNXRTEwHhcNMjQwODMwMTcxODA2WhcNMjQxMTI4MTgxODAwWjAfMR0wGwYDVQQDExR2aWRlby1tZXRhLmh1bWl4LmNvbTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBCUEPPnFlnX1x/5pLGW8v48gNt8y618XFyT/dNg6GevhBLq/p59qFsm2zUxBqp0UiclBoN2elpjAm60Grp8DJmjggJOMIICSjAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYIKwYBBQUHAwEwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUz2NuzjrlFG1NY2OXSofumA2OyU4wHwYDVR0jBBgwFoAUkHeSNWfE/6jMqeZ72YB5e8yT+TgwXgYIKwYBBQUHAQEEUjBQMCcGCCsGAQUFBzABhhtodHRwOi8vby5wa2kuZ29vZy9zL3dlMS9EWFUwJQYIKwYBBQUHMAKGGWh0dHA6Ly9pLnBraS5nb29nL3dlMS5jcnQwHwYDVR0RBBgwFoIUdmlkZW8tbWV0YS5odW1peC5jb20wEwYDVR0gBAwwCjAIBgZngQwBAgEwNgYDVR0fBC8wLTAroCmgJ4YlaHR0cDovL2MucGtpLmdvb2cvd2UxL2otNlBhZDJxdUVjLmNybDCCAQUGCisGAQQB1nkCBAIEgfYEgfMA8QB3AHb/iD8KtvuVUcJhzPWHujS0pM27KdxoQgqf5mdMWjp0AAABkaSCRawAAAQDAEgwRgIhAIAxN9jsLjAGsICPWqIvxDK4H4I+uss0nQaWCm3TSPQVAiEAwgJKuvMHnhD34LGxlolU77+hlyRk+mK77nYtBberzGcAdgBIsONr2qZHNA/lagL6nTDrHFIBy1bdLIHZu7+rOdiEcwAAAZGkgkWdAAAEAwBHMEUCIFLHwYirCVrqCyyirG0GEDHpU2KSxt3a67TIDTsLZE32AiEAuCaT4QcA8aTSHUy9cbU+LxoKm7ycLswN5pr5mj99ZugwCgYIKoZIzj0EAwIDSAAwRQIgNX/fpQ/x+7hVeG1lZNzjgo+/Waop8z6YyFiDttVfU8wCIQDI2/ukaNo6VMzolEvl5K4QKe4KOTa5lbdk3j47aAakwBMBAAQAAAAAAAEBAAAAAAAABngyNTUxOQAAABFFQ0RTQS1QMjU2LVNIQTI1NgADZgoyJpFcT/u7IImFpjLfBb3Dl5pUIkzVhYlpa26W6oMAAAAAAAADrDCCA6gwggNOoAMCAQICEA11rLRRmhkVDqQ7YELk9l8wCgYIKoZIzj0EAwIwOzELMAkGA1UEBhMCVVMxHjAcBgNVBAoTFUdvb2dsZSBUcnVzdCBTZXJ2aWNlczEMMAoGA1UEAxMDV0UxMB4XDTI0MDgzMDE3MTgwNloXDTI0MTEyODE4MTgwMFowHzEdMBsGA1UEAxMUdmlkZW8tbWV0YS5odW1peC5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQQlBDz5xZZ19cf+aSxlvL+PIDbfMutfFxck/3TYOhnr4QS6v6efahbJts1MQaqdFInJQaDdnpaYwJutBq6fAyZo4ICTjCCAkowDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFM9jbs465RRtTWNjl0qH7pgNjslOMB8GA1UdIwQYMBaAFJB3kjVnxP+ozKnme9mAeXvMk/k4MF4GCCsGAQUFBwEBBFIwUDAnBggrBgEFBQcwAYYbaHR0cDovL28ucGtpLmdvb2cvcy93ZTEvRFhVMCUGCCsGAQUFBzAChhlodHRwOi8vaS5wa2kuZ29vZy93ZTEuY3J0MB8GA1UdEQQYMBaCFHZpZGVvLW1ldGEuaHVtaXguY29tMBMGA1UdIAQMMAowCAYGZ4EMAQIBMDYGA1UdHwQvMC0wK6ApoCeGJWh0dHA6Ly9jLnBraS5nb29nL3dlMS9qLTZQYWQycXVFYy5jcmwwggEFBgorBgEEAdZ5AgQCBIH2BIHzAPEAdwB2/4g/Crb7lVHCYcz1h7o0tKTNuyncaEIKn+ZnTFo6dAAAAZGkgkWsAAAEAwBIMEYCIQCAMTfY7C4wBrCAj1qiL8QyuB+CPrrLNJ0Glgpt00j0FQIhAMICSrrzB54Q9+CxsZaJVO+/oZckZPpiu+52LQW3q8xnAHYASLDja9qmRzQP5WoC+p0w6xxSActW3SyB2bu/qznYhHMAAAGRpIJFnQAABAMARzBFAiBSx8GIqwla6gssoqxtBhAx6VNiksbd2uu0yA07C2RN9gIhALgmk+EHAPGk0h1MvXG1Pi8aCpu8nC7MDeaa+Zo/fWboMAoGCCqGSM49BAMCA0gAMEUCIDV/36UP8fu4VXhtZWTc44KPv1mqKfM+mMhYg7bVX1PMAiEAyNv7pGjaOlTM6JRL5eSuECnuCjk2uZW3ZN4+O2gGpMBmCjImkVxP+7sgiYWmMt8FvcOXmlQiTNWFiWlrbpbqgwAAAAAAAAKjMIICnzCCAiWgAwIBAgIQf/MZd5csIkp2FV0TttaF4zAKBggqhkjOPQQDAzBHMQswCQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZpY2VzIExMQzEUMBIGA1UEAxMLR1RTIFJvb3QgUjQwHhcNMjMxMjEzMDkwMDAwWhcNMjkwMjIwMTQwMDAwWjA7MQswCQYDVQQGEwJVUzEeMBwGA1UEChMVR29vZ2xlIFRydXN0IFNlcnZpY2VzMQwwCgYDVQQDEwNXRTEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAARvzTr+Z1dHTCEDhUDCR127WEcPQMFcF4XGGTfn1XzthkubgdnXGhOlCgP4mMTG6J7/EFmPLCaY9eYmJbsPAvpWo4H+MIH7MA4GA1UdDwEB/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQUkHeSNWfE/6jMqeZ72YB5e8yT+TgwHwYDVR0jBBgwFoAUgEzW63T/STaj1dj8tT7FavCUHYwwNAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzAChhhodHRwOi8vaS5wa2kuZ29vZy9yNC5jcnQwKwYDVR0fBCQwIjAgoB6gHIYaaHR0cDovL2MucGtpLmdvb2cvci9yNC5jcmwwEwYDVR0gBAwwCjAIBgZngQwBAgEwCgYIKoZIzj0EAwMDaAAwZQIxAOcCq1HW90OVznX+0RGU1cxAQXomvtgM8zItPZCuFQ8jSBJSjz5keROv9aYsAm5VsQIwJonMaAFi54mrfhfoFNZEfuNMSQ6/bIBiNLiyoX46FohQvKeIoJ99cx7sUkFN7uJWZgoyJpFcT/u7IImFpjLfBb3Dl5pUIkzVhYlpa26W6oMAAAAAAAACDTCCAgkwggGOoAMCAQICDQID5cBo72ManHKQUFIwCgYIKoZIzj0EAwMwRzELMAkGA1UEBhMCVVMxIjAgBgNVBAoTGUdvb2dsZSBUcnVzdCBTZXJ2aWNlcyBMTEMxFDASBgNVBAMTC0dUUyBSb290IFI0MB4XDTE2MDYyMjAwMDAwMFoXDTM2MDYyMjAwMDAwMFowRzELMAkGA1UEBhMCVVMxIjAgBgNVBAoTGUdvb2dsZSBUcnVzdCBTZXJ2aWNlcyBMTEMxFDASBgNVBAMTC0dUUyBSb290IFI0MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE83Rzp2iLYK5DuDXFgTB7S0md+8FhzubeRr1r1WEYNa5A3XP3iZEwWus87oV8okB2O6nGuEfYKueSkWpz6bFyOZ8pn6KY019eWIZlD6GEZQbR3IvJx3PIjGov5cSr0R2Ko0IwQDAOBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUgEzW63T/STaj1dj8tT7FavCUHYwwCgYIKoZIzj0EAwMDaQAwZgIxAOhA/4PeA/Sfrh16py65r0/2gx0OLYUBHdHZauwPwq/HXlZeXNUcWCIoC/cwti+xfAIxAPBhPKf0oILjIdWEHXOGnC2vyjSb8Z+5IzbivGADnYCzmlbI4eK7FHnKzSHUlLVJQwAAAAEAAAACaDIAAQAAAABZYW5vbjp0bHNmbGFnczB4MDAwMDAwMDA6dmlkZW8tbWV0YS5odW1peC5jb206NDQzXnBhcnRpdGlvbktleT0lMjhodHRwcyUyQ2l0LWNvbm5lY3QuZnIlMjkAAA== request-method GET request-Origin https://www.it-connect.fr request-Accept-Encoding gzip, deflate, br, zstd response-head HTTP/2 200 
date: Sat, 19 Oct 2024 05:58:06 GMT
content-type: text/vtt; charset=utf-8
content-length: 14803
access-control-allow-origin: *
content-disposition: inline
etag: "570baec0b5a123af6ed0855aa7eb46b1"
last-modified: Fri, 23 Aug 2024 16:40:53 GMT
vary: Origin, Accept-Encoding
cache-control: max-age=2678400
cf-cache-status: HIT
age: 27421
accept-ranges: bytes
report-to: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=HtN0cEFYxJTMIwj2P%2B43CnK2rrhtRAmMslSS2Kiy%2Ft1oeQBlYeibEmDDm64YdxdVMofZb0PBQQ8Um3WrjzTLYMyrwG3OrzlBDibhfOWUArUzimrChFO9lYg1BNdFZoRs68d4p5T2iw%3D%3D"}],"group":"cf-nel","max_age":604800}
nel: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
server: cloudflare
cf-ray: 8d4e88cf9d22b79f-ABJ
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=5146&sent=34&recv=12&lost=0&retrans=0&sent_bytes=37143&recv_bytes=1686&delivery_rate=814277&cwnd=254&unsent_bytes=0&cid=4d7d6c9dffcba43d&ts=93&x=0"
X-Firefox-Spdy: h2
 original-response-headers date: Sat, 19 Oct 2024 05:58:06 GMT
content-type: text/vtt; charset=utf-8
content-length: 14803
access-control-allow-origin: *
content-disposition: inline
etag: "570baec0b5a123af6ed0855aa7eb46b1"
last-modified: Fri, 23 Aug 2024 16:40:53 GMT
vary: Origin, Accept-Encoding
cache-control: max-age=2678400
cf-cache-status: HIT
age: 27421
accept-ranges: bytes
report-to: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=HtN0cEFYxJTMIwj2P%2B43CnK2rrhtRAmMslSS2Kiy%2Ft1oeQBlYeibEmDDm64YdxdVMofZb0PBQQ8Um3WrjzTLYMyrwG3OrzlBDibhfOWUArUzimrChFO9lYg1BNdFZoRs68d4p5T2iw%3D%3D"}],"group":"cf-nel","max_age":604800}
nel: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
server: cloudflare
cf-ray: 8d4e88cf9d22b79f-ABJ
alt-svc: h3=":443"; ma=86400
server-timing: cfL4;desc="?proto=TCP&rtt=5146&sent=34&recv=12&lost=0&retrans=0&sent_bytes=37143&recv_bytes=1686&delivery_rate=814277&cwnd=254&unsent_bytes=0&cid=4d7d6c9dffcba43d&ts=93&x=0"
X-Firefox-Spdy: h2
 ctid 1 net-response-time-onstart 129 net-response-time-onstop 129   9”